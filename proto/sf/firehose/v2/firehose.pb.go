// copied the following files
// https://github.com/streamingfast/proto/blob/17ecce85bc8a6464a995933e68b172ba63646753/sf/firehose/v2/firehose.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: sf/firehose/v2/firehose.proto

package pbfirehose

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ForkStep int32

const (
	ForkStep_STEP_UNSET ForkStep = 0
	// Incoming block
	ForkStep_STEP_NEW ForkStep = 1
	// A reorg caused this specific block to be excluded from the chain
	ForkStep_STEP_UNDO ForkStep = 2
	// Block is now final and can be committed (finality is chain specific,
	// see chain documentation for more details)
	ForkStep_STEP_FINAL ForkStep = 3
)

// Enum value maps for ForkStep.
var (
	ForkStep_name = map[int32]string{
		0: "STEP_UNSET",
		1: "STEP_NEW",
		2: "STEP_UNDO",
		3: "STEP_FINAL",
	}
	ForkStep_value = map[string]int32{
		"STEP_UNSET": 0,
		"STEP_NEW":   1,
		"STEP_UNDO":  2,
		"STEP_FINAL": 3,
	}
)

func (x ForkStep) Enum() *ForkStep {
	p := new(ForkStep)
	*p = x
	return p
}

func (x ForkStep) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ForkStep) Descriptor() protoreflect.EnumDescriptor {
	return file_sf_firehose_v2_firehose_proto_enumTypes[0].Descriptor()
}

func (ForkStep) Type() protoreflect.EnumType {
	return &file_sf_firehose_v2_firehose_proto_enumTypes[0]
}

func (x ForkStep) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ForkStep.Descriptor instead.
func (ForkStep) EnumDescriptor() ([]byte, []int) {
	return file_sf_firehose_v2_firehose_proto_rawDescGZIP(), []int{0}
}

type InfoResponse_BlockIdEncoding int32

const (
	InfoResponse_BLOCK_ID_ENCODING_UNSET     InfoResponse_BlockIdEncoding = 0
	InfoResponse_BLOCK_ID_ENCODING_HEX       InfoResponse_BlockIdEncoding = 1
	InfoResponse_BLOCK_ID_ENCODING_0X_HEX    InfoResponse_BlockIdEncoding = 2
	InfoResponse_BLOCK_ID_ENCODING_BASE58    InfoResponse_BlockIdEncoding = 3
	InfoResponse_BLOCK_ID_ENCODING_BASE64    InfoResponse_BlockIdEncoding = 4
	InfoResponse_BLOCK_ID_ENCODING_BASE64URL InfoResponse_BlockIdEncoding = 5
)

// Enum value maps for InfoResponse_BlockIdEncoding.
var (
	InfoResponse_BlockIdEncoding_name = map[int32]string{
		0: "BLOCK_ID_ENCODING_UNSET",
		1: "BLOCK_ID_ENCODING_HEX",
		2: "BLOCK_ID_ENCODING_0X_HEX",
		3: "BLOCK_ID_ENCODING_BASE58",
		4: "BLOCK_ID_ENCODING_BASE64",
		5: "BLOCK_ID_ENCODING_BASE64URL",
	}
	InfoResponse_BlockIdEncoding_value = map[string]int32{
		"BLOCK_ID_ENCODING_UNSET":     0,
		"BLOCK_ID_ENCODING_HEX":       1,
		"BLOCK_ID_ENCODING_0X_HEX":    2,
		"BLOCK_ID_ENCODING_BASE58":    3,
		"BLOCK_ID_ENCODING_BASE64":    4,
		"BLOCK_ID_ENCODING_BASE64URL": 5,
	}
)

func (x InfoResponse_BlockIdEncoding) Enum() *InfoResponse_BlockIdEncoding {
	p := new(InfoResponse_BlockIdEncoding)
	*p = x
	return p
}

func (x InfoResponse_BlockIdEncoding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InfoResponse_BlockIdEncoding) Descriptor() protoreflect.EnumDescriptor {
	return file_sf_firehose_v2_firehose_proto_enumTypes[1].Descriptor()
}

func (InfoResponse_BlockIdEncoding) Type() protoreflect.EnumType {
	return &file_sf_firehose_v2_firehose_proto_enumTypes[1]
}

func (x InfoResponse_BlockIdEncoding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InfoResponse_BlockIdEncoding.Descriptor instead.
func (InfoResponse_BlockIdEncoding) EnumDescriptor() ([]byte, []int) {
	return file_sf_firehose_v2_firehose_proto_rawDescGZIP(), []int{6, 0}
}

type SingleBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Reference:
	//
	//	*SingleBlockRequest_BlockNumber_
	//	*SingleBlockRequest_BlockHashAndNumber_
	//	*SingleBlockRequest_Cursor_
	Reference  isSingleBlockRequest_Reference `protobuf_oneof:"reference"`
	Transforms []*anypb.Any                   `protobuf:"bytes,6,rep,name=transforms,proto3" json:"transforms,omitempty"`
}

func (x *SingleBlockRequest) Reset() {
	*x = SingleBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_firehose_v2_firehose_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleBlockRequest) ProtoMessage() {}

func (x *SingleBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sf_firehose_v2_firehose_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleBlockRequest.ProtoReflect.Descriptor instead.
func (*SingleBlockRequest) Descriptor() ([]byte, []int) {
	return file_sf_firehose_v2_firehose_proto_rawDescGZIP(), []int{0}
}

func (m *SingleBlockRequest) GetReference() isSingleBlockRequest_Reference {
	if m != nil {
		return m.Reference
	}
	return nil
}

func (x *SingleBlockRequest) GetBlockNumber() *SingleBlockRequest_BlockNumber {
	if x, ok := x.GetReference().(*SingleBlockRequest_BlockNumber_); ok {
		return x.BlockNumber
	}
	return nil
}

func (x *SingleBlockRequest) GetBlockHashAndNumber() *SingleBlockRequest_BlockHashAndNumber {
	if x, ok := x.GetReference().(*SingleBlockRequest_BlockHashAndNumber_); ok {
		return x.BlockHashAndNumber
	}
	return nil
}

func (x *SingleBlockRequest) GetCursor() *SingleBlockRequest_Cursor {
	if x, ok := x.GetReference().(*SingleBlockRequest_Cursor_); ok {
		return x.Cursor
	}
	return nil
}

func (x *SingleBlockRequest) GetTransforms() []*anypb.Any {
	if x != nil {
		return x.Transforms
	}
	return nil
}

type isSingleBlockRequest_Reference interface {
	isSingleBlockRequest_Reference()
}

type SingleBlockRequest_BlockNumber_ struct {
	BlockNumber *SingleBlockRequest_BlockNumber `protobuf:"bytes,3,opt,name=block_number,json=blockNumber,proto3,oneof"`
}

type SingleBlockRequest_BlockHashAndNumber_ struct {
	BlockHashAndNumber *SingleBlockRequest_BlockHashAndNumber `protobuf:"bytes,4,opt,name=block_hash_and_number,json=blockHashAndNumber,proto3,oneof"`
}

type SingleBlockRequest_Cursor_ struct {
	Cursor *SingleBlockRequest_Cursor `protobuf:"bytes,5,opt,name=cursor,proto3,oneof"`
}

func (*SingleBlockRequest_BlockNumber_) isSingleBlockRequest_Reference() {}

func (*SingleBlockRequest_BlockHashAndNumber_) isSingleBlockRequest_Reference() {}

func (*SingleBlockRequest_Cursor_) isSingleBlockRequest_Reference() {}

type SingleBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Block *anypb.Any `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
	// Metadata about the block, added in some Firehose version, so consumer
	// should be ready to handle the absence of this field.
	Metadata *BlockMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *SingleBlockResponse) Reset() {
	*x = SingleBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_firehose_v2_firehose_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleBlockResponse) ProtoMessage() {}

func (x *SingleBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sf_firehose_v2_firehose_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleBlockResponse.ProtoReflect.Descriptor instead.
func (*SingleBlockResponse) Descriptor() ([]byte, []int) {
	return file_sf_firehose_v2_firehose_proto_rawDescGZIP(), []int{1}
}

func (x *SingleBlockResponse) GetBlock() *anypb.Any {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *SingleBlockResponse) GetMetadata() *BlockMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Controls where the stream of blocks will start.
	//
	// The stream will start **inclusively** at the requested block num.
	//
	// When not provided, starts at first streamable block of the chain. Not all
	// chain starts at the same block number, so you might get an higher block than
	// requested when using default value of 0.
	//
	// Can be negative, will be resolved relative to the chain head block, assuming
	// a chain at head block #100, then using `-50` as the value will start at block
	// #50. If it resolves before first streamable block of chain, we assume start
	// of chain.
	//
	// If `start_cursor` is given, this value is ignored and the stream instead starts
	// immediately after the Block pointed by the opaque `start_cursor` value.
	StartBlockNum int64 `protobuf:"varint,1,opt,name=start_block_num,json=startBlockNum,proto3" json:"start_block_num,omitempty"`
	// Controls where the stream of blocks will start which will be immediately after
	// the Block pointed by this opaque cursor.
	//
	// Obtain this value from a previously received `Response.cursor`.
	//
	// This value takes precedence over `start_block_num`.
	Cursor string `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
	// When non-zero, controls where the stream of blocks will stop.
	//
	// The stream will close **after** that block has passed so the boundary is
	// **inclusive**.
	StopBlockNum uint64 `protobuf:"varint,3,opt,name=stop_block_num,json=stopBlockNum,proto3" json:"stop_block_num,omitempty"`
	// With final_block_only, you only receive blocks with STEP_FINAL
	// Default behavior will send blocks as STEP_NEW, with occasional STEP_UNDO
	FinalBlocksOnly bool         `protobuf:"varint,4,opt,name=final_blocks_only,json=finalBlocksOnly,proto3" json:"final_blocks_only,omitempty"`
	Transforms      []*anypb.Any `protobuf:"bytes,10,rep,name=transforms,proto3" json:"transforms,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_firehose_v2_firehose_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_sf_firehose_v2_firehose_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_sf_firehose_v2_firehose_proto_rawDescGZIP(), []int{2}
}

func (x *Request) GetStartBlockNum() int64 {
	if x != nil {
		return x.StartBlockNum
	}
	return 0
}

func (x *Request) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *Request) GetStopBlockNum() uint64 {
	if x != nil {
		return x.StopBlockNum
	}
	return 0
}

func (x *Request) GetFinalBlocksOnly() bool {
	if x != nil {
		return x.FinalBlocksOnly
	}
	return false
}

func (x *Request) GetTransforms() []*anypb.Any {
	if x != nil {
		return x.Transforms
	}
	return nil
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Chain specific block payload, ex:
	//   - sf.eosio.type.v1.Block
	//   - sf.ethereum.type.v1.Block
	//   - sf.near.type.v1.Block
	Block  *anypb.Any `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
	Step   ForkStep   `protobuf:"varint,6,opt,name=step,proto3,enum=sf.firehose.v2.ForkStep" json:"step,omitempty"`
	Cursor string     `protobuf:"bytes,10,opt,name=cursor,proto3" json:"cursor,omitempty"`
	// Metadata about the block, added in some Firehose version, so consumer
	// should be ready to handle the absence of this field.
	Metadata *BlockMetadata `protobuf:"bytes,12,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_firehose_v2_firehose_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_sf_firehose_v2_firehose_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_sf_firehose_v2_firehose_proto_rawDescGZIP(), []int{3}
}

func (x *Response) GetBlock() *anypb.Any {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *Response) GetStep() ForkStep {
	if x != nil {
		return x.Step
	}
	return ForkStep_STEP_UNSET
}

func (x *Response) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *Response) GetMetadata() *BlockMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type BlockMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Num is the block number of this response's block.
	Num uint64 `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	// ID is the block ID of this response's block. The ID actual representation is chain specific.
	// - Antelope & Ethereum uses hex.
	// - NEAR & Solana uses base58.
	//
	// Refer to the chain documentation for more details.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// ParentNum is the block number of the parent of this response's block
	ParentNum uint64 `protobuf:"varint,3,opt,name=parent_num,json=parentNum,proto3" json:"parent_num,omitempty"`
	// ParentID is the block ID of the parent of this response's block. If this response is the genesis block,
	// this field is empty.
	//
	// The ID actual representation is chain specific.
	// - Antelope & Ethereum uses hex.
	// - NEAR & Solana uses base58.
	//
	// Refer to the chain documentation for more details.
	ParentId string `protobuf:"bytes,4,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	// LibNum is the block number of the last irreversible block (a.k.a last finalized block) at the time of this
	// response' block. It determines the finality of the block.
	LibNum uint64 `protobuf:"varint,5,opt,name=lib_num,json=libNum,proto3" json:"lib_num,omitempty"`
	// Time is the time at which the block was produced.
	Time *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *BlockMetadata) Reset() {
	*x = BlockMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_firehose_v2_firehose_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockMetadata) ProtoMessage() {}

func (x *BlockMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_sf_firehose_v2_firehose_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockMetadata.ProtoReflect.Descriptor instead.
func (*BlockMetadata) Descriptor() ([]byte, []int) {
	return file_sf_firehose_v2_firehose_proto_rawDescGZIP(), []int{4}
}

func (x *BlockMetadata) GetNum() uint64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *BlockMetadata) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BlockMetadata) GetParentNum() uint64 {
	if x != nil {
		return x.ParentNum
	}
	return 0
}

func (x *BlockMetadata) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *BlockMetadata) GetLibNum() uint64 {
	if x != nil {
		return x.LibNum
	}
	return 0
}

func (x *BlockMetadata) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type InfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InfoRequest) Reset() {
	*x = InfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_firehose_v2_firehose_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoRequest) ProtoMessage() {}

func (x *InfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sf_firehose_v2_firehose_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoRequest.ProtoReflect.Descriptor instead.
func (*InfoRequest) Descriptor() ([]byte, []int) {
	return file_sf_firehose_v2_firehose_proto_rawDescGZIP(), []int{5}
}

type InfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Canonical chain name from https://thegraph.com/docs/en/developing/supported-networks/ (ex: matic, mainnet ...)
	ChainName string `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
	// Alternate names for the chain.
	ChainNameAliases []string `protobuf:"bytes,2,rep,name=chain_name_aliases,json=chainNameAliases,proto3" json:"chain_name_aliases,omitempty"`
	// First block that is served by this endpoint. This should usually be the genesis block,
	// but some providers may have truncated history.
	FirstStreamableBlockNum uint64 `protobuf:"varint,3,opt,name=first_streamable_block_num,json=firstStreamableBlockNum,proto3" json:"first_streamable_block_num,omitempty"`
	FirstStreamableBlockId  string `protobuf:"bytes,4,opt,name=first_streamable_block_id,json=firstStreamableBlockId,proto3" json:"first_streamable_block_id,omitempty"`
	// This informs the client on how to decode the `block_id` field inside the "Clock" message
	// as well as the `first_streamable_block_id` above.
	BlockIdEncoding InfoResponse_BlockIdEncoding `protobuf:"varint,5,opt,name=block_id_encoding,json=blockIdEncoding,proto3,enum=sf.firehose.v2.InfoResponse_BlockIdEncoding" json:"block_id_encoding,omitempty"`
	// features describes the blocks. Popular values for EVM chains include `base`, `extended` or `hybrid`.
	BlockFeatures []string `protobuf:"bytes,10,rep,name=block_features,json=blockFeatures,proto3" json:"block_features,omitempty"`
}

func (x *InfoResponse) Reset() {
	*x = InfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_firehose_v2_firehose_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoResponse) ProtoMessage() {}

func (x *InfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sf_firehose_v2_firehose_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoResponse.ProtoReflect.Descriptor instead.
func (*InfoResponse) Descriptor() ([]byte, []int) {
	return file_sf_firehose_v2_firehose_proto_rawDescGZIP(), []int{6}
}

func (x *InfoResponse) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *InfoResponse) GetChainNameAliases() []string {
	if x != nil {
		return x.ChainNameAliases
	}
	return nil
}

func (x *InfoResponse) GetFirstStreamableBlockNum() uint64 {
	if x != nil {
		return x.FirstStreamableBlockNum
	}
	return 0
}

func (x *InfoResponse) GetFirstStreamableBlockId() string {
	if x != nil {
		return x.FirstStreamableBlockId
	}
	return ""
}

func (x *InfoResponse) GetBlockIdEncoding() InfoResponse_BlockIdEncoding {
	if x != nil {
		return x.BlockIdEncoding
	}
	return InfoResponse_BLOCK_ID_ENCODING_UNSET
}

func (x *InfoResponse) GetBlockFeatures() []string {
	if x != nil {
		return x.BlockFeatures
	}
	return nil
}

// Get the current known canonical version of a block at with this number
type SingleBlockRequest_BlockNumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num uint64 `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
}

func (x *SingleBlockRequest_BlockNumber) Reset() {
	*x = SingleBlockRequest_BlockNumber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_firehose_v2_firehose_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleBlockRequest_BlockNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleBlockRequest_BlockNumber) ProtoMessage() {}

func (x *SingleBlockRequest_BlockNumber) ProtoReflect() protoreflect.Message {
	mi := &file_sf_firehose_v2_firehose_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleBlockRequest_BlockNumber.ProtoReflect.Descriptor instead.
func (*SingleBlockRequest_BlockNumber) Descriptor() ([]byte, []int) {
	return file_sf_firehose_v2_firehose_proto_rawDescGZIP(), []int{0, 0}
}

func (x *SingleBlockRequest_BlockNumber) GetNum() uint64 {
	if x != nil {
		return x.Num
	}
	return 0
}

// Get the current block with specific hash and number
type SingleBlockRequest_BlockHashAndNumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num  uint64 `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	Hash string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *SingleBlockRequest_BlockHashAndNumber) Reset() {
	*x = SingleBlockRequest_BlockHashAndNumber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_firehose_v2_firehose_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleBlockRequest_BlockHashAndNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleBlockRequest_BlockHashAndNumber) ProtoMessage() {}

func (x *SingleBlockRequest_BlockHashAndNumber) ProtoReflect() protoreflect.Message {
	mi := &file_sf_firehose_v2_firehose_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleBlockRequest_BlockHashAndNumber.ProtoReflect.Descriptor instead.
func (*SingleBlockRequest_BlockHashAndNumber) Descriptor() ([]byte, []int) {
	return file_sf_firehose_v2_firehose_proto_rawDescGZIP(), []int{0, 1}
}

func (x *SingleBlockRequest_BlockHashAndNumber) GetNum() uint64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *SingleBlockRequest_BlockHashAndNumber) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

// Get the block that generated a specific cursor
type SingleBlockRequest_Cursor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cursor string `protobuf:"bytes,1,opt,name=cursor,proto3" json:"cursor,omitempty"`
}

func (x *SingleBlockRequest_Cursor) Reset() {
	*x = SingleBlockRequest_Cursor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_firehose_v2_firehose_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleBlockRequest_Cursor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleBlockRequest_Cursor) ProtoMessage() {}

func (x *SingleBlockRequest_Cursor) ProtoReflect() protoreflect.Message {
	mi := &file_sf_firehose_v2_firehose_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleBlockRequest_Cursor.ProtoReflect.Descriptor instead.
func (*SingleBlockRequest_Cursor) Descriptor() ([]byte, []int) {
	return file_sf_firehose_v2_firehose_proto_rawDescGZIP(), []int{0, 2}
}

func (x *SingleBlockRequest_Cursor) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

var File_sf_firehose_v2_firehose_proto protoreflect.FileDescriptor

var file_sf_firehose_v2_firehose_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x73, 0x66, 0x2f, 0x66, 0x69, 0x72, 0x65, 0x68, 0x6f, 0x73, 0x65, 0x2f, 0x76, 0x32,
	0x2f, 0x66, 0x69, 0x72, 0x65, 0x68, 0x6f, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0e, 0x73, 0x66, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x68, 0x6f, 0x73, 0x65, 0x2e, 0x76, 0x32, 0x1a,
	0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdc, 0x03, 0x0a, 0x12,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x53, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x66, 0x69,
	0x72, 0x65, 0x68, 0x6f, 0x73, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x6a, 0x0a, 0x15, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x66, 0x2e, 0x66, 0x69, 0x72, 0x65,
	0x68, 0x6f, 0x73, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x61, 0x73, 0x68, 0x41, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x12, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x41, 0x6e, 0x64, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x68, 0x6f, 0x73,
	0x65, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x48, 0x00,
	0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x1a, 0x1f,
	0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x10, 0x0a,
	0x03, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x1a,
	0x3a, 0x0a, 0x12, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x41, 0x6e, 0x64, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x1a, 0x20, 0x0a, 0x06, 0x43,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x42, 0x0b, 0x0a,
	0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x7c, 0x0a, 0x13, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2a, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x39, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x73, 0x66, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x68, 0x6f, 0x73, 0x65, 0x2e, 0x76, 0x32,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd1, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x74,
	0x6f, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x69,
	0x6e, 0x61, 0x6c, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x34, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79,
	0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x22, 0xb7, 0x01, 0x0a,
	0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2c, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x73, 0x66, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x68, 0x6f, 0x73,
	0x65, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x65, 0x70, 0x52, 0x04, 0x73,
	0x74, 0x65, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x39, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x73, 0x66, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x68, 0x6f, 0x73, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb6, 0x01, 0x0a, 0x0d, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x69, 0x62, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6c, 0x69, 0x62, 0x4e, 0x75, 0x6d, 0x12,
	0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0x0d, 0x0a, 0x0b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x9b,
	0x04, 0x0a, 0x0c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x1a,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x17, 0x66, 0x69, 0x72, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x39, 0x0a, 0x19, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x49, 0x64, 0x12, 0x58, 0x0a, 0x11, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64,
	0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x68, 0x6f, 0x73, 0x65, 0x2e, 0x76, 0x32,
	0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x49, 0x64, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x25,
	0x0a, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xc4, 0x01, 0x0a, 0x0f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49,
	0x64, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x4c, 0x4f,
	0x43, 0x4b, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x55,
	0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f,
	0x49, 0x44, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x48, 0x45, 0x58, 0x10,
	0x01, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x4e,
	0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x30, 0x58, 0x5f, 0x48, 0x45, 0x58, 0x10, 0x02, 0x12,
	0x1c, 0x0a, 0x18, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x43, 0x4f,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x35, 0x38, 0x10, 0x03, 0x12, 0x1c, 0x0a,
	0x18, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x36, 0x34, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x42,
	0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x42, 0x41, 0x53, 0x45, 0x36, 0x34, 0x55, 0x52, 0x4c, 0x10, 0x05, 0x2a, 0x47, 0x0a, 0x08,
	0x46, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x65, 0x70, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x45, 0x50,
	0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x45, 0x50,
	0x5f, 0x4e, 0x45, 0x57, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x55,
	0x4e, 0x44, 0x4f, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x46, 0x49,
	0x4e, 0x41, 0x4c, 0x10, 0x03, 0x32, 0x47, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12,
	0x3d, 0x0a, 0x06, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x17, 0x2e, 0x73, 0x66, 0x2e, 0x66,
	0x69, 0x72, 0x65, 0x68, 0x6f, 0x73, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x66, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x68, 0x6f, 0x73, 0x65,
	0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x32, 0x59,
	0x0a, 0x05, 0x46, 0x65, 0x74, 0x63, 0x68, 0x12, 0x50, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x22, 0x2e, 0x73, 0x66, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x68, 0x6f, 0x73, 0x65, 0x2e, 0x76,
	0x32, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73, 0x66, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x68, 0x6f,
	0x73, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x51, 0x0a, 0x0c, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1b, 0x2e, 0x73, 0x66, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x68, 0x6f, 0x73, 0x65, 0x2e,
	0x76, 0x32, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x73, 0x66, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x68, 0x6f, 0x73, 0x65, 0x2e, 0x76, 0x32, 0x2e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x39, 0x5a, 0x37,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x66, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x62, 0x67, 0x6f, 0x2f, 0x73, 0x66,
	0x2f, 0x66, 0x69, 0x72, 0x65, 0x68, 0x6f, 0x73, 0x65, 0x2f, 0x76, 0x32, 0x3b, 0x70, 0x62, 0x66,
	0x69, 0x72, 0x65, 0x68, 0x6f, 0x73, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sf_firehose_v2_firehose_proto_rawDescOnce sync.Once
	file_sf_firehose_v2_firehose_proto_rawDescData = file_sf_firehose_v2_firehose_proto_rawDesc
)

func file_sf_firehose_v2_firehose_proto_rawDescGZIP() []byte {
	file_sf_firehose_v2_firehose_proto_rawDescOnce.Do(func() {
		file_sf_firehose_v2_firehose_proto_rawDescData = protoimpl.X.CompressGZIP(file_sf_firehose_v2_firehose_proto_rawDescData)
	})
	return file_sf_firehose_v2_firehose_proto_rawDescData
}

var file_sf_firehose_v2_firehose_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_sf_firehose_v2_firehose_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_sf_firehose_v2_firehose_proto_goTypes = []interface{}{
	(ForkStep)(0),                                 // 0: sf.firehose.v2.ForkStep
	(InfoResponse_BlockIdEncoding)(0),             // 1: sf.firehose.v2.InfoResponse.BlockIdEncoding
	(*SingleBlockRequest)(nil),                    // 2: sf.firehose.v2.SingleBlockRequest
	(*SingleBlockResponse)(nil),                   // 3: sf.firehose.v2.SingleBlockResponse
	(*Request)(nil),                               // 4: sf.firehose.v2.Request
	(*Response)(nil),                              // 5: sf.firehose.v2.Response
	(*BlockMetadata)(nil),                         // 6: sf.firehose.v2.BlockMetadata
	(*InfoRequest)(nil),                           // 7: sf.firehose.v2.InfoRequest
	(*InfoResponse)(nil),                          // 8: sf.firehose.v2.InfoResponse
	(*SingleBlockRequest_BlockNumber)(nil),        // 9: sf.firehose.v2.SingleBlockRequest.BlockNumber
	(*SingleBlockRequest_BlockHashAndNumber)(nil), // 10: sf.firehose.v2.SingleBlockRequest.BlockHashAndNumber
	(*SingleBlockRequest_Cursor)(nil),             // 11: sf.firehose.v2.SingleBlockRequest.Cursor
	(*anypb.Any)(nil),                             // 12: google.protobuf.Any
	(*timestamppb.Timestamp)(nil),                 // 13: google.protobuf.Timestamp
}
var file_sf_firehose_v2_firehose_proto_depIdxs = []int32{
	9,  // 0: sf.firehose.v2.SingleBlockRequest.block_number:type_name -> sf.firehose.v2.SingleBlockRequest.BlockNumber
	10, // 1: sf.firehose.v2.SingleBlockRequest.block_hash_and_number:type_name -> sf.firehose.v2.SingleBlockRequest.BlockHashAndNumber
	11, // 2: sf.firehose.v2.SingleBlockRequest.cursor:type_name -> sf.firehose.v2.SingleBlockRequest.Cursor
	12, // 3: sf.firehose.v2.SingleBlockRequest.transforms:type_name -> google.protobuf.Any
	12, // 4: sf.firehose.v2.SingleBlockResponse.block:type_name -> google.protobuf.Any
	6,  // 5: sf.firehose.v2.SingleBlockResponse.metadata:type_name -> sf.firehose.v2.BlockMetadata
	12, // 6: sf.firehose.v2.Request.transforms:type_name -> google.protobuf.Any
	12, // 7: sf.firehose.v2.Response.block:type_name -> google.protobuf.Any
	0,  // 8: sf.firehose.v2.Response.step:type_name -> sf.firehose.v2.ForkStep
	6,  // 9: sf.firehose.v2.Response.metadata:type_name -> sf.firehose.v2.BlockMetadata
	13, // 10: sf.firehose.v2.BlockMetadata.time:type_name -> google.protobuf.Timestamp
	1,  // 11: sf.firehose.v2.InfoResponse.block_id_encoding:type_name -> sf.firehose.v2.InfoResponse.BlockIdEncoding
	4,  // 12: sf.firehose.v2.Stream.Blocks:input_type -> sf.firehose.v2.Request
	2,  // 13: sf.firehose.v2.Fetch.Block:input_type -> sf.firehose.v2.SingleBlockRequest
	7,  // 14: sf.firehose.v2.EndpointInfo.Info:input_type -> sf.firehose.v2.InfoRequest
	5,  // 15: sf.firehose.v2.Stream.Blocks:output_type -> sf.firehose.v2.Response
	3,  // 16: sf.firehose.v2.Fetch.Block:output_type -> sf.firehose.v2.SingleBlockResponse
	8,  // 17: sf.firehose.v2.EndpointInfo.Info:output_type -> sf.firehose.v2.InfoResponse
	15, // [15:18] is the sub-list for method output_type
	12, // [12:15] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_sf_firehose_v2_firehose_proto_init() }
func file_sf_firehose_v2_firehose_proto_init() {
	if File_sf_firehose_v2_firehose_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sf_firehose_v2_firehose_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_firehose_v2_firehose_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_firehose_v2_firehose_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_firehose_v2_firehose_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_firehose_v2_firehose_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_firehose_v2_firehose_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_firehose_v2_firehose_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_firehose_v2_firehose_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleBlockRequest_BlockNumber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_firehose_v2_firehose_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleBlockRequest_BlockHashAndNumber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_firehose_v2_firehose_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleBlockRequest_Cursor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sf_firehose_v2_firehose_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*SingleBlockRequest_BlockNumber_)(nil),
		(*SingleBlockRequest_BlockHashAndNumber_)(nil),
		(*SingleBlockRequest_Cursor_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sf_firehose_v2_firehose_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_sf_firehose_v2_firehose_proto_goTypes,
		DependencyIndexes: file_sf_firehose_v2_firehose_proto_depIdxs,
		EnumInfos:         file_sf_firehose_v2_firehose_proto_enumTypes,
		MessageInfos:      file_sf_firehose_v2_firehose_proto_msgTypes,
	}.Build()
	File_sf_firehose_v2_firehose_proto = out.File
	file_sf_firehose_v2_firehose_proto_rawDesc = nil
	file_sf_firehose_v2_firehose_proto_goTypes = nil
	file_sf_firehose_v2_firehose_proto_depIdxs = nil
}
